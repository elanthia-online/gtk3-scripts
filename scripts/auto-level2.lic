=begin

  July 13, 2017
  I have edited this script. I added the night time Ta'Vaalor Guards. Otherwise it is still the same.
  July 14, 2017
  Noticed another set of guards on the gate. added them also.
  July 31, 2017
  Another guard added.
  Author: RJ

  This script will get you to level 20, AUTOMATICALLY! It's just like magic! Currently only gets you to level 20 in Icemule, level 13 in other cities.

  Simply start this script up as soon as you start a new character (or at any point before you hit level 20/13) and the script will first have you visit every shop for some easy experience! Almost takes you to level 1 right away! Then the script will do the sprite quest if you still have the sprite with you. After that it will do the Raging Thrak (or your current town's equivalent) introduction and answer all questions for easy experience. After that it will then run messages until you reach level 3. AUTOMATICALLY!

  If you wish to skip the sprite part simply decline the sprite's invitation before starting script.

  If you wish to skip the Raging Thrak/equivalent then start script like so: ;auto-level thrak

  That will tell the script you have already finished the Raging Thrak portion. After that just start the script up like normal and watch it deliver messages and make you a small fortune!

  If you wish to skip delivering messages and jump straight to hunting then start the script like so: ;auto-level message

  Note script will remember when it has finished the sprite quest and the Raging Thrak part, even after script has exited and you have logged off. AUTOMATICALLY!

  If for some reason you need to do these parts again start the script like so: ;auto-level reset

  ;auto-level reset will reset all options, as if you had never started the script before.

  After exploring shops/doing sprite quest/speaking with Thrak the script will ask if you want to run messages until level 3 or just jump right into hunting! At level 3 the script will start hunting regardless of message status. The script will automatically hunt until fried, rest until mind clears out, skin, loot, and sell stuff. Skinning/looting/selling requires either ;sloot or all of the following: ;loot, ;waitloot, ;loot-be-gone

  After script is done with shops, sprite, thrak, and messages it will remind you to run setup to set your character up before it will go out and hunt.

  Author:  Tgo01
  Version:  41

=end

#Skill list:
#Same for everyprofession:
#1 Armor Use
#2 Shield Use
#3 Edged Weapons
#4 Blunt Weapons
#5 Two-Handed Weapons
#6 Ranged Weapons
#7 Thrown Weapons
#8 Pole Arm Weapons
#9 Brawling
#10 Two Weapon Combat
#11 Combat Maneuvers
#12 Multi-Opponent Combat
#13 Ambush
#14 Physical Training
#15 Dodging
#16 Climbing
#17 Swimming
#18 Disarming Traps
#19 Picking Locks
#20 Stalking & Hiding
#21 Perception
#22 First Aid
#23 Trading
#24 Picking Pockets
#25 Survival
#26 Arcane Symbols
#27 Magic Item Use
#28 Harness Power
#29 Spell Aiming
#30 Mana Control: Elemental
#31 Mana Control: Spiritual
#32 Mana Control: Mental
#36 Air
#37 Earth
#38 Fire
#39 Water
#40 Blessings
#41 Religion
#42 Spirit Summoning
#43 Demonology
#44 Necromancy
#45 Divination
#46 Manipulation
#47 Telepahty
#48 Transference
#49 Transformation

#Bard specific:
#33 Minor Elemental
#34 Bard Spellsongs

#Cleric specific:
#33 Major Spiritual
#34 Minor Spiritual
#35 Cleric Base

#Empath specific:
#33 Major Spiritual
#34 Minor Spiritual
#35 Empath Base

#Monk specific:
#33 Minor Spiritual
#34 Minor Mental

#Paladin specific:
#33 Minor Spiritual
#34 Paladin Base

#Ranger specific:
#33 Minor Spiritual
#34 Ranger Base

#Rogue specific:
#33 Minor Elemental
#34 Minor Spiritual

#Sorcerer specific:
#33 Minor Elemental
#34 Minor Spiritual
#35 Sorcerer Base

#Warrior specific:
#33 Minor Elemental
#34 Minor Spiritual

#Wizard specific:
#33 Major Elemental
#34 Minor Elemental
#35 Wizard Base

CharSettings['finished_thrak'] = nil unless CharSettings['finished_thrak']
CharSettings['finished_sprite_quest'] = nil unless CharSettings['finished_sprite_quest']
CharSettings['finished_visiting_shops'] = nil unless CharSettings['finished_visiting_shops']
CharSettings['done_with_messages'] = nil unless CharSettings['done_with_messages']
CharSettings['done_with_auto_skills'] = nil unless CharSettings['done_with_auto_skills']
CharSettings['setup_has_been_run'] = nil unless CharSettings['setup_has_been_run']

raging_thrak_rooms = [ '8722', '9005', '21223' ]
message_runner_rooms = [ '7971', '2438', '13519' ]
temple_rooms = [ '2334', '4041', '10369' ]
clothier_rooms = [ '3403', '8720' ]
check_in_rooms = [ '3427', '8671', '5826' ]

#Icemule Hunting Areas:
level_1_icemule_rats_nest = [ '9075', '9076', '9077', '9078', '9079', '9080', '9081', '9082', '9083', '9084', '9087', '9090', '9089', '9085', '9088', '9092', '9091', '9086' ]
level_2_icemule_thyrils = [ '3156', '3157', '3158', '3159', '3160', '3161', '3162', '3175', '3174', '3167', '3163', '3168', '3169', '3170', '3173', '3172', '3171' ]
level_3_icemule_hobgoblins_and_snowcats = [ '3195', '3196', '3197', '3203', '3202', '3201', '3200', '3204', '3205', '3206' ]
level_6_icemule_lesser_orcs_and_leapers = [ '3058', '3059', '3060', '3061', '3062', '3063', '3064', '3065', '3066', '3067', '3068', '3036', '3070', '3071' ]
level_8_icemule_thurfels_island = [ '9140', '9148', '9144', '9143', '9141', '9149', '9150', '9162', '9161', '9160', '9159', '9157', '9151', '9156', '9155', '9154', '9153', '9152', '9158', '9145', '9144', '9146', '9241' ]
level_10_icemule_thurfels_island = [ '9165', '9166', '9167', '9168', '9169', '9170', '9171', '9172', '9173', '9163', '9164', '9192', '9193', '9194', '9191', '9195', '9196', '9197', '9190', '9198', '9199', '9189', '9200', '9201', '9203', '9202' ]
level_14_icemule_high_plains = [ '3007', '3008', '3005', '3006', '2999', '2998', '3000', '3001', '3002', '3003', '3004', '3009', '3010', '3011', '3012', '3013', '3029', '3028', '3027' ]

#Landing Hunting Areas:
level_1_landing_ants = [ "7576", "7580", "7577", "7581", "7582", "7575", "7584", "7585", "7591", "7596", "7599", "7590", "7586", "7588", "7589", "7598", "7594", "7597", "7587", "7583", "7592", "7593", "7595" ]
level_2_landing_squirrels = [ "6305", "6304", "6306", "6307", "6308", "6309", "6310", "6311", "6312", "6313" ]
level_3_landing_hobgoblins = [ "6722", "6723", "6724", "6725", "6727", "6728", "6729", "6730", "6731", "6732", "6733", "6721" ]
level_4_landing_kappas = [ "7603", "7604", "7605", "7606", "7607", "7608", "7609", "7610", "7611", "7612", "7613", "7614", "7615", "7616", "7617", "7618", "7619", "7620", "7621", "7622", "7623", "7624", "7625", "7626", "7627", "7628", "7629", "7630", "7631", "7632", "7633", "7634", "7635", "7636", "7637", "7638", "7639", "7640", "7641", "7642", "7643", "7644" ]
level_7_landing_burrow_orcs = [ "7927", "7928", "7929", "7930", "7931", "7932", "7933", "7934", "7935", "7936", "7937", "7938", "7939", "7940", "7941", "7942", "7943", "7944", "7945", "7946", "7947", "7948", "7949", "7950", "7951", "7952", "7953", "7954", "7955", "7956", "7957", "7958", "7959", "7960", "7961", "7962", "7963", "7964" ]
level_10_landing_shelfae = [ "7654", "7655", "7656", "7657", "7658", "7659", "7660", "7661", "7662", "7663", "7664", "7665", "7666", "7667", "7668", "7669", "7670", "7671", "7672" ]

#Nations Hunting Areas:
level_1_vaalor_fire_ants = [ "10289", "6098", "10293", "10294", "6095", "13921", "6093", "10298", "6091", "6090", "10297", "10296", "10269", "10292", "10291", "10290", "6100", "10295" ]
level_2_vaalor_goblins_and_sirens = [ "10504", "10507", "10506", "10505", "10508", "10509", "10510" ]
level_3_vaalor_relnaks_and_leapers = [ "5985", "5986", "5989", "5990", "5993", "5992", "5991", "5988", "5987", "5994", "5981", "5980", "5978", "5977", "5984", "5982", "5976", "5975", "5983", "5979" ]

not_attacking_stance = "guarded"
attacking_stance = "guarded"

defensive_spell_list = [ '101', '103', '115', '120', '202', '219', '303', '310', '313', '314', '319', '401', '406', '414', '430', '503', '507', '508', '520', '540', '601', '602', '618', '625', '640', '712', '905', '911', '913', '1003', '1109', '1119', '1130', '1202', '1204', '1208', '1214', '1215', '1216', '1220', '1601', '1609' ]

offensive_spell_list = [ '1007', '1605', '1606' ]

current_hunting_grounds = nil
target = nil
person_here = nil
new_room_stuff_to_do = nil
wander = nil
wander_rooms = Array.new
start_loot = nil
hunt_my_room = nil
get_in_not_attacking_stance = nil
stand_check = nil
check_mind_status = nil
recast_spells = nil
make_sure_this_is_still_my_room = nil
get_target = nil
do_raging_thrak = nil
run_messages = nil
wait_timer_for_message = nil
get_message_destination = nil
get_message_job = nil
hand_in_message = nil
message_destination_room = nil
message_destination_npc = nil
doing_sprite_quest = nil
person = nil
go_to = nil
target_room = nil
target_room_list = nil
check_sprite_quest = nil
do_sprite_quest = nil
weapon = nil
npc_sprite_quest = nil
roaming_npc_here = nil
roaming_npc_message = nil
landing_roaming_npc_layout = nil
find_roaming_npc_in_landing = nil
check_current_level = nil
visit_all_shops = nil
list_of_all_shops = nil
hunting = nil
attack_target = nil
auto_do_skills = nil
skill_levels = Hash.new
skill_number1 = nil
skill_number_level1 = nil
skill_number2 = nil
skill_number_level2 = nil
single_train = nil
double_train = nil
first_attack = nil
check_if_dead = nil
bard_renewal_cost = nil
check_if_person_wants_to_run_messages = nil
update_hunting_area = nil
check_for_wounds = nil
valid_targets = nil
setup = nil
skill_difference = nil
start_time = nil
current_unarmed_attack = nil
current_unarmed_positioning = nil
character_cannot_attack_check = nil
check_if_settings_are_filled_out = nil
waiting_for_healing = nil
received_healing = nil
number_of_tries = nil
start_healing_time = nil
use_use_herbs_script_to_heal = nil
ask_for_spells_check = nil
need_elemental_spells = nil
need_ranger_spells = nil
need_wizard_spells = nil
need_spirit_spells = nil
need_disk = nil
spell_to_ask_for = nil
ask_for_spells_counter = 0
check_if_poisoned_or_diseaseed = nil
all_spells_needed_list = nil
waiting_for_undisease_or_unpoison = nil
current_level = Char.level

setup = proc{
  Gtk.queue {
    $auto_level_WINDOW = Gtk::Window.new
    $auto_level_WINDOW.set_icon(@default_icon)
    $auto_level_WINDOW.title = "auto_level"
    $auto_level_WINDOW.set_border_width(10)
    $auto_level_BOX = Gtk::Box.new(:vertical)
    $auto_level_BOX.set_border_width(5)

    $auto_level_VERTICAL_BOX1 = Gtk::Box.new(:vertical, 0)
    $auto_level_VERTICAL_BOX2 = Gtk::Box.new(:vertical, 0)
    $auto_level_VERTICAL_BOX3 = Gtk::Box.new(:vertical, 0)
    $auto_level_VERTICAL_BOX4 = Gtk::Box.new(:vertical, 0)
    $auto_level_VERTICAL_BOX5 = Gtk::Box.new(:vertical, 0)
    $auto_level_VERTICAL_BOX6 = Gtk::Box.new(:vertical, 0)
    $auto_level_VERTICAL_BOX7 = Gtk::Box.new(:vertical, 0)
    $auto_level_VERTICAL_BOX8 = Gtk::Box.new(:vertical, 0)
    $auto_level_VERTICAL_BOX9 = Gtk::Box.new(:vertical, 0)
    $auto_level_VERTICAL_BOX10 = Gtk::Box.new(:vertical, 0)
    $auto_level_VERTICAL_BOX11 = Gtk::Box.new(:vertical, 0)
    $auto_level_VERTICAL_BOX12 = Gtk::Box.new(:vertical, 0)

    $auto_level_WINDOW.add($auto_level_BOX)
    $auto_level_NOTEBOOK = Gtk::Notebook.new
    $auto_level_NOTEBOOK.set_show_border(true)
    $auto_level_BOX.add($auto_level_NOTEBOOK)
    $auto_level_NOTEBOOK.append_page($auto_level_VERTICAL_BOX1, Gtk::Label.new('Armor Skills'))
    $auto_level_NOTEBOOK.append_page($auto_level_VERTICAL_BOX2, Gtk::Label.new('Weapon Skills'))
    $auto_level_NOTEBOOK.append_page($auto_level_VERTICAL_BOX3, Gtk::Label.new('Combat Skills'))
    $auto_level_NOTEBOOK.append_page($auto_level_VERTICAL_BOX4, Gtk::Label.new('Magic Skills'))
    $auto_level_NOTEBOOK.append_page($auto_level_VERTICAL_BOX5, Gtk::Label.new('Spell Research'))
    $auto_level_NOTEBOOK.append_page($auto_level_VERTICAL_BOX6, Gtk::Label.new('Elemental/Spiritual Lore'))
    $auto_level_NOTEBOOK.append_page($auto_level_VERTICAL_BOX7, Gtk::Label.new('Sorcerous/Mental Lore'))
    $auto_level_NOTEBOOK.append_page($auto_level_VERTICAL_BOX8, Gtk::Label.new('General Skills 1'))
    $auto_level_NOTEBOOK.append_page($auto_level_VERTICAL_BOX9, Gtk::Label.new('General Skills 2'))
    $auto_level_NOTEBOOK.append_page($auto_level_VERTICAL_BOX10, Gtk::Label.new('General'))
    $auto_level_NOTEBOOK.append_page($auto_level_VERTICAL_BOX11, Gtk::Label.new('Hunting'))
    $auto_level_NOTEBOOK.append_page($auto_level_VERTICAL_BOX12, Gtk::Label.new('Healing'))
    $auto_level_ENTRY = Hash.new
    $auto_level_TABLE_SIZE = Hash.new
  }

  Gtk.queue {
    $auto_level_TABLE1 = Gtk::Table.new(6, 3, false)
    $auto_level_TABLE1.row_spacings=3
    $auto_level_TABLE1.column_spacings=3
    $auto_level_VERTICAL_BOX1.pack_start($auto_level_TABLE1, :expand => false, :fill => false, :padding => 0)

    $auto_level_TABLE2 = Gtk::Table.new(6, 3, false)
    $auto_level_TABLE2.row_spacings=3
    $auto_level_TABLE2.column_spacings=3
    $auto_level_VERTICAL_BOX2.pack_start($auto_level_TABLE2, :expand => false, :fill => false, :padding => 0)

    $auto_level_TABLE3 = Gtk::Table.new(6, 3, false)
    $auto_level_TABLE3.row_spacings=3
    $auto_level_TABLE3.column_spacings=3
    $auto_level_VERTICAL_BOX3.pack_start($auto_level_TABLE3, :expand => false, :fill => false, :padding => 0)

    $auto_level_TABLE4 = Gtk::Table.new(6, 3, false)
    $auto_level_TABLE4.row_spacings=3
    $auto_level_TABLE4.column_spacings=3
    $auto_level_VERTICAL_BOX4.pack_start($auto_level_TABLE4, :expand => false, :fill => false, :padding => 0)

    $auto_level_TABLE5 = Gtk::Table.new(6, 3, false)
    $auto_level_TABLE5.row_spacings=3
    $auto_level_TABLE5.column_spacings=3
    $auto_level_VERTICAL_BOX5.pack_start($auto_level_TABLE5, :expand => false, :fill => false, :padding => 0)

    $auto_level_TABLE6 = Gtk::Table.new(6, 3, false)
    $auto_level_TABLE6.row_spacings=3
    $auto_level_TABLE6.column_spacings=3
    $auto_level_VERTICAL_BOX6.pack_start($auto_level_TABLE6, :expand => false, :fill => false, :padding => 0)

    $auto_level_TABLE7 = Gtk::Table.new(6, 3, false)
    $auto_level_TABLE7.row_spacings=3
    $auto_level_TABLE7.column_spacings=3
    $auto_level_VERTICAL_BOX7.pack_start($auto_level_TABLE7, :expand => false, :fill => false, :padding => 0)

    $auto_level_TABLE8 = Gtk::Table.new(6, 3, false)
    $auto_level_TABLE8.row_spacings=3
    $auto_level_TABLE8.column_spacings=3
    $auto_level_VERTICAL_BOX8.pack_start($auto_level_TABLE8, :expand => false, :fill => false, :padding => 0)

    $auto_level_TABLE9 = Gtk::Table.new(6, 3, false)
    $auto_level_TABLE9.row_spacings=3
    $auto_level_TABLE9.column_spacings=3
    $auto_level_VERTICAL_BOX9.pack_start($auto_level_TABLE9, :expand => false, :fill => false, :padding => 0)

    $auto_level_TABLE10 = Gtk::Table.new(6, 3, false)
    $auto_level_TABLE10.row_spacings=3
    $auto_level_TABLE10.column_spacings=3
    $auto_level_VERTICAL_BOX10.pack_start($auto_level_TABLE10, :expand => false, :fill => false, :padding => 0)

    $auto_level_TABLE11 = Gtk::Table.new(6, 3, false)
    $auto_level_TABLE11.row_spacings=3
    $auto_level_TABLE11.column_spacings=3
    $auto_level_VERTICAL_BOX11.pack_start($auto_level_TABLE11, :expand => false, :fill => false, :padding => 0)


    $auto_level_TABLE12 = Gtk::Table.new(6, 3, false)
    $auto_level_TABLE12.row_spacings=3
    $auto_level_TABLE12.column_spacings=3
    $auto_level_VERTICAL_BOX12.pack_start($auto_level_TABLE12, :expand => false, :fill => false, :padding => 0)
  }

  def self.add_label_entry(table, label, variable)
    size = $auto_level_TABLE_SIZE[table] || 0

    label = Gtk::Label.new(label)
    align = Gtk::Alignment.new 1, 0, 0, 0
    align.set_padding(4, 0, 3, 4)
    align.add(label)
    table.attach(align, 0, 1, size, size + 1)

    entry = Gtk::Entry.new
    entry.text = UserVars.auto_level[variable].to_s
    entry.set_width_request(157)
    table.attach(entry, 1, 2, size, size + 1)

    $auto_level_ENTRY[variable] = entry
    $auto_level_TABLE_SIZE[table] += 1
  end

  Gtk.queue {
    $auto_level_ENTRY = Hash.new
    add_label_entry($auto_level_TABLE1, "Armor Use", 'a1')
    add_label_entry($auto_level_TABLE1, "Shield Use", 'a2')
    add_label_entry($auto_level_TABLE2, "Edged Weapons", 'a3')
    add_label_entry($auto_level_TABLE2, "Blunt Weapons", 'a4')
    add_label_entry($auto_level_TABLE2, "Two-Handed Weapons", 'a5')
    add_label_entry($auto_level_TABLE2, "Ranged Weapons", 'a6')
    add_label_entry($auto_level_TABLE2, "Thrown Weapons", 'a7')
    add_label_entry($auto_level_TABLE2, "Pole Arm Weapons", 'a8')
    add_label_entry($auto_level_TABLE2, "Brawling", 'a9')
    add_label_entry($auto_level_TABLE3, "Two Weapon Combat", 'a10')
    add_label_entry($auto_level_TABLE3, "Combat Maneuvers", 'a11')
    add_label_entry($auto_level_TABLE3, "Multi-Opponent Combat", 'a12')
    add_label_entry($auto_level_TABLE3, "Ambush", 'a13')
    add_label_entry($auto_level_TABLE3, "Physical Training", 'a14')
    add_label_entry($auto_level_TABLE3, "Dodging", 'a15')
    add_label_entry($auto_level_TABLE4, "Arcane Symbols", 'a26')
    add_label_entry($auto_level_TABLE4, "Magic Item Use", 'a27')
    add_label_entry($auto_level_TABLE4, "Harness Power", 'a28')
    add_label_entry($auto_level_TABLE4, "Spell Aiming", 'a29')
    add_label_entry($auto_level_TABLE4, "Mana Control: Elemental", 'a30')
    add_label_entry($auto_level_TABLE4, "Mana Control: Spiritual", 'a31')
    add_label_entry($auto_level_TABLE4, "Mana Control: Mental", 'a32')
    if Char.prof =~ /Bard/
      add_label_entry($auto_level_TABLE5, "Minor Elemental", 'a33')
      add_label_entry($auto_level_TABLE5, "Bard Spellsongs", 'a34')
    elsif Char.prof =~ /Cleric/
      add_label_entry($auto_level_TABLE5, "Major Spiritual", 'a33')
      add_label_entry($auto_level_TABLE5, "Minor Spiritual", 'a34')
      add_label_entry($auto_level_TABLE5, "Cleric Base", 'a35')
    elsif Char.prof =~ /Empath/
      add_label_entry($auto_level_TABLE5, "Major Spiritual", 'a33')
      add_label_entry($auto_level_TABLE5, "Minor Spiritual", 'a34')
      add_label_entry($auto_level_TABLE5, "Empath Base", 'a35')
    elsif Char.prof =~ /Monk/
      add_label_entry($auto_level_TABLE5, "Minor Spiritual", 'a33')
      add_label_entry($auto_level_TABLE5, "Minor Mental", 'a34')
    elsif Char.prof =~ /Paladin/
      add_label_entry($auto_level_TABLE5, "Minor Spiritual", 'a33')
      add_label_entry($auto_level_TABLE5, "Paladin Base", 'a34')
    elsif Char.prof =~ /Ranger/
      add_label_entry($auto_level_TABLE5, "Minor Spiritual", 'a33')
      add_label_entry($auto_level_TABLE5, "Ranger Base", 'a34')
    elsif Char.prof =~ /Rogue|Warrior/
      add_label_entry($auto_level_TABLE5, "Minor Elemental", 'a33')
      add_label_entry($auto_level_TABLE5, "Minor Spiritual", 'a34')
    elsif Char.prof =~ /Sorcerer/
      add_label_entry($auto_level_TABLE5, "Minor Elemental", 'a33')
      add_label_entry($auto_level_TABLE5, "Minor Spiritual", 'a34')
      add_label_entry($auto_level_TABLE5, "Sorcerer Base", 'a35')
    elsif Char.prof =~ /Wizard/
      add_label_entry($auto_level_TABLE5, "Major Elemental", 'a33')
      add_label_entry($auto_level_TABLE5, "Minor Elemental", 'a34')
      add_label_entry($auto_level_TABLE5, "Wizard Base", 'a35')
    end
    add_label_entry($auto_level_TABLE6, "Air", 'a36')
    add_label_entry($auto_level_TABLE6, "Earth", 'a37')
    add_label_entry($auto_level_TABLE6, "Fire", 'a38')
    add_label_entry($auto_level_TABLE6, "Water", 'a39')
    add_label_entry($auto_level_TABLE6, "Blessings", 'a40')
    add_label_entry($auto_level_TABLE6, "Religion", 'a41')
    add_label_entry($auto_level_TABLE6, "Spirit Summoning", 'a42')
    add_label_entry($auto_level_TABLE7, "Demonology", 'a43')
    add_label_entry($auto_level_TABLE7, "Necromancy", 'a44')
    add_label_entry($auto_level_TABLE7, "Divination", 'a45')
    add_label_entry($auto_level_TABLE7, "Manipulation", 'a46')
    add_label_entry($auto_level_TABLE7, "Telepahty", 'a47')
    add_label_entry($auto_level_TABLE7, "Transference", 'a48')
    add_label_entry($auto_level_TABLE7, "Transformation", 'a49')
    add_label_entry($auto_level_TABLE8, "Climbing", 'a16')
    add_label_entry($auto_level_TABLE8, "Swimming", 'a17')
    add_label_entry($auto_level_TABLE8, "Disarming Traps", 'a18')
    add_label_entry($auto_level_TABLE8, "Picking Locks", 'a19')
    add_label_entry($auto_level_TABLE8, "Stalking & Hiding", 'a20')
    add_label_entry($auto_level_TABLE9, "Perception", 'a21')
    add_label_entry($auto_level_TABLE9, "First Aid", 'a22')
    add_label_entry($auto_level_TABLE9, "Trading", 'a23')
    add_label_entry($auto_level_TABLE9, "Picking Pockets", 'a24')
    add_label_entry($auto_level_TABLE9, "Survival", 'a25')
    add_label_entry($auto_level_TABLE10, "Ask for Spells", 'ask_for_spells')
    add_label_entry($auto_level_TABLE11, "Main Hand", 'main_hand')
    add_label_entry($auto_level_TABLE11, "Off Hand", 'off_hand')
    add_label_entry($auto_level_TABLE11, "Hunting Style", 'hunting_style')
    add_label_entry($auto_level_TABLE11, "Loot Script", 'loot_script')
    add_label_entry($auto_level_TABLE12, "Healing Preference", 'healing_preference')
    add_label_entry($auto_level_TABLE12, "Tip Amount", 'tip_amount')
    add_label_entry($auto_level_TABLE12, "Number of Tries", 'number_of_tries')
    add_label_entry($auto_level_TABLE12, "Thank Message", 'thank_message')
  }

  def self.add_checkbox(table, x_pos, label, variable, default = false)
    size = $auto_level_TABLE_SIZE[table] || 0
    checkbox = Gtk::CheckButton.new label
    value = UserVars.auto_level[variable].nil? ? default : UserVars.auto_level[variable]
    checkbox.set_active(value)
    table.attach(checkbox, x_pos, x_pos + 1, size, size + 1)
    $auto_level_ENTRY[variable] = checkbox
    $auto_level_TABLE_SIZE[table] += 1 if x_pos == 1
  end

  Gtk.queue {
    $auto_level_WINDOW.signal_connect("delete_event") {
      $auto_level_SETUP_COMPLETED = true
    }
  }

  Gtk.queue {
#   $auto_level_TOOLTIPS = Gtk::Tooltips.new
#   $auto_level_TOOLTIPS.enable

    label = Gtk::Label.new
    label.set_markup("Enter how you want the script to automatically adjust your skills upon leveling up.\n#x or #.#x indicates you want the script to train # times your level.\n+# indicates you want the script to add # to said skill. This is in addition to #x.\nmax:# indicates you don't want the script to train higher than # in said skill.\nExample: 1x +1 max:101\nThe above example would train 1 times your level, plus 1, and stop training at 101 ranks.\nThis means at level 20 it would train (1x20) + (1) for a total of 21 skill ranks.\nLeave blank if you don't want script to train in said skill.")
    align = Gtk::Alignment.new(1, 0, 0, 0)
    align.set_padding(50, 0, 0, 40)
    align.add(label)
    $auto_level_TABLE1.attach(align, 1, 2, 8, 9)

    label = Gtk::Label.new
    label.set_markup("Enter how you want the script to automatically adjust your skills upon leveling up.\n#x or #.#x indicates you want the script to train # times your level.\n+# indicates you want the script to add # to said skill. This is in addition to #x.\nmax:# indicates you don't want the script to train higher than # in said skill.\nExample: 1x +1 max:101\nThe above example would train 1 times your level, plus 1, and stop training at 101 ranks.\nThis means at level 20 it would train (1x20) + (1) for a total of 21 skill ranks.\nLeave blank if you don't want script to train in said skill.")
    align = Gtk::Alignment.new(1, 0, 0, 0)
    align.set_padding(50, 0, 0, 40)
    align.add(label)
    $auto_level_TABLE2.attach(align, 1, 2, 8, 9)

    label = Gtk::Label.new
    label.set_markup("Enter how you want the script to automatically adjust your skills upon leveling up.\n#x or #.#x indicates you want the script to train # times your level.\n+# indicates you want the script to add # to said skill. This is in addition to #x.\nmax:# indicates you don't want the script to train higher than # in said skill.\nExample: 1x +1 max:101\nThe above example would train 1 times your level, plus 1, and stop training at 101 ranks.\nThis means at level 20 it would train (1x20) + (1) for a total of 21 skill ranks.\nLeave blank if you don't want script to train in said skill.")
    align = Gtk::Alignment.new(1, 0, 0, 0)
    align.set_padding(50, 0, 0, 40)
    align.add(label)
    $auto_level_TABLE3.attach(align, 1, 2, 8, 9)

    label = Gtk::Label.new
    label.set_markup("Enter how you want the script to automatically adjust your skills upon leveling up.\n#x or #.#x indicates you want the script to train # times your level.\n+# indicates you want the script to add # to said skill. This is in addition to #x.\nmax:# indicates you don't want the script to train higher than # in said skill.\nExample: 1x +1 max:101\nThe above example would train 1 times your level, plus 1, and stop training at 101 ranks.\nThis means at level 20 it would train (1x20) + (1) for a total of 21 skill ranks.\nLeave blank if you don't want script to train in said skill.")
    align = Gtk::Alignment.new(1, 0, 0, 0)
    align.set_padding(50, 0, 0, 40)
    align.add(label)
    $auto_level_TABLE4.attach(align, 1, 2, 8, 9)

    label = Gtk::Label.new
    label.set_markup("Enter how you want the script to automatically adjust your skills upon leveling up.\n#x or #.#x indicates you want the script to train # times your level.\n+# indicates you want the script to add # to said skill. This is in addition to #x.\nmax:# indicates you don't want the script to train higher than # in said skill.\nExample: 1x +1 max:101\nThe above example would train 1 times your level, plus 1, and stop training at 101 ranks.\nThis means at level 20 it would train (1x20) + (1) for a total of 21 skill ranks.\nLeave blank if you don't want script to train in said skill.")
    align = Gtk::Alignment.new(1, 0, 0, 0)
    align.set_padding(50, 0, 0, 40)
    align.add(label)
    $auto_level_TABLE5.attach(align, 1, 2, 8, 9)

    label = Gtk::Label.new
    label.set_markup("Enter how you want the script to automatically adjust your skills upon leveling up.\n#x or #.#x indicates you want the script to train # times your level.\n+# indicates you want the script to add # to said skill. This is in addition to #x.\nmax:# indicates you don't want the script to train higher than # in said skill.\nExample: 1x +1 max:101\nThe above example would train 1 times your level, plus 1, and stop training at 101 ranks.\nThis means at level 20 it would train (1x20) + (1) for a total of 21 skill ranks.\nLeave blank if you don't want script to train in said skill.")
    align = Gtk::Alignment.new(1, 0, 0, 0)
    align.set_padding(50, 0, 0, 40)
    align.add(label)
    $auto_level_TABLE6.attach(align, 1, 2, 8, 9)

    label = Gtk::Label.new
    label.set_markup("Enter how you want the script to automatically adjust your skills upon leveling up.\n#x or #.#x indicates you want the script to train # times your level.\n+# indicates you want the script to add # to said skill. This is in addition to #x.\nmax:# indicates you don't want the script to train higher than # in said skill.\nExample: 1x +1 max:101\nThe above example would train 1 times your level, plus 1, and stop training at 101 ranks.\nThis means at level 20 it would train (1x20) + (1) for a total of 21 skill ranks.\nLeave blank if you don't want script to train in said skill.")
    align = Gtk::Alignment.new(1, 0, 0, 0)
    align.set_padding(50, 0, 0, 40)
    align.add(label)
    $auto_level_TABLE7.attach(align, 1, 2, 8, 9)

    label = Gtk::Label.new
    label.set_markup("Enter how you want the script to automatically adjust your skills upon leveling up.\n#x or #.#x indicates you want the script to train # times your level.\n+# indicates you want the script to add # to said skill. This is in addition to #x.\nmax:# indicates you don't want the script to train higher than # in said skill.\nExample: 1x +1 max:101\nThe above example would train 1 times your level, plus 1, and stop training at 101 ranks.\nThis means at level 20 it would train (1x20) + (1) for a total of 21 skill ranks.\nLeave blank if you don't want script to train in said skill.")
    align = Gtk::Alignment.new(1, 0, 0, 0)
    align.set_padding(50, 0, 0, 40)
    align.add(label)
    $auto_level_TABLE8.attach(align, 1, 2, 8, 9)

    label = Gtk::Label.new
    label.set_markup("Enter how you want the script to automatically adjust your skills upon leveling up.\n#x or #.#x indicates you want the script to train # times your level.\n+# indicates you want the script to add # to said skill. This is in addition to #x.\nmax:# indicates you don't want the script to train higher than # in said skill.\nExample: 1x +1 max:101\nThe above example would train 1 times your level, plus 1, and stop training at 101 ranks.\nThis means at level 20 it would train (1x20) + (1) for a total of 21 skill ranks.\nLeave blank if you don't want script to train in said skill.")
    align = Gtk::Alignment.new(1, 0, 0, 0)
    align.set_padding(50, 0, 0, 40)
    align.add(label)
    $auto_level_TABLE9.attach(align, 1, 2, 8, 9)

    label = Gtk::Label.new
    label.set_markup("<b>Ask for Spells:</b> Enter <b>yes</b> to ask for spells while resting in TC.")
    align = Gtk::Alignment.new(1, 0, 0, 0)
    align.set_padding(50, 0, 0, 40)
    align.add(label)
    $auto_level_TABLE10.attach(align, 1, 2, 8, 9)

    label = Gtk::Label.new
    label.set_markup("<b>Main Hand:</b> Enter the name of your main hand, leave blank if doing unarmed combat.\nBe sure your main hand weapon matches the weapon skill you are training in.\n<b>Off Hand:</b> Enter name of your off hand item, leave blank if not using an off hand.\n<b>Hunting Style:</b> Enter <b>attack</b> for swinging a weapon, <b>unarmed</b> for unarmed combat, <b>CS</b> if hunting with CS spells, or <b>bolt</b> if hunting with bolt spells.\n<b>Loot Script:</b> Enter <b>loot</b> to use ;loot for all of your looting needs, <b>sloot</b> to use ;sloot, or <b>none</b> if you don't want to loot/sell anything.\n;loot requires ;waitloot to function properly and requires ;loot-be-gone to sell loot.\n;sloot does both looting and selling.\nAll scripts must be downloaded from repo and ;sloot, ;loot, and ;loot-be-gone all require setup via their own setup menus to function properly.\n;sloot must be setup to skin/loot all dead critters in room when run to operate properly.")
    align = Gtk::Alignment.new(1, 0, 0, 0)
    align.set_padding(50, 0, 0, 40)
    align.add(label)
    $auto_level_TABLE11.attach(align, 1, 2, 8, 9)

    label = Gtk::Label.new
    label.set_markup("<b>If you do not have ;useherbs installed then script will exit at nearst TC when injured whenever it attempts to use ;useherbs.</b>\n<b>Healing Preference:</b> Enter <b>ask</b> to ask for healing at nearest TC when wounded, <b>script</b> to use ;useherbs, or <b>none</b> to have script exit at TC when wounded.\n<b>Tip Amount:</b> Enter number of silvers to tip empath if using <b>ask</b>.\n<b>Number of Tries:</b> Number of times to ask for healing before script will use ;useherbs anyways. Script waits 60 seconds between each try. Set this to at least 1.\n<b>Thank Message:</b> Enter message to say to empath after receiving healing if using <b>ask</b>.")
    align = Gtk::Alignment.new(1, 0, 0, 0)
    align.set_padding(50, 0, 0, 40)
    align.add(label)
    $auto_level_TABLE12.attach(align, 1, 2, 8, 9)

    $auto_level_WINDOW.show_all
  }

  $auto_level_SETUP_COMPLETED = false
  until($auto_level_SETUP_COMPLETED)
    sleep 1
  end

  UserVars.auto_level ||= Hash.new
  $auto_level_ENTRY.keys.each { |key|
    if( $auto_level_ENTRY[key].class.to_s =~ /CheckButton/ )
      value = $auto_level_ENTRY[key].active?
      UserVars.auto_level[key] = $auto_level_ENTRY[key].active?
    else
      if(key == 'wounded_eval')
        UserVars.auto_level[key] = $auto_level_ENTRY[key].text
      else
        UserVars.auto_level[key] = $auto_level_ENTRY[key].text.strip.downcase
      end
    end
  }
  UserVars.save()

  Gtk.queue {
    $auto_level_WINDOW.destroy
  }
}

list_of_all_skills = [ UserVars.auto_level["a1"], UserVars.auto_level["a2"], UserVars.auto_level["a3"], UserVars.auto_level["a4"], UserVars.auto_level["a5"], UserVars.auto_level["a6"], UserVars.auto_level["a7"], UserVars.auto_level["a8"], UserVars.auto_level["a9"], UserVars.auto_level["a10"], UserVars.auto_level["a11"], UserVars.auto_level["a12"], UserVars.auto_level["a13"], UserVars.auto_level["a14"], UserVars.auto_level["a15"], UserVars.auto_level["a16"], UserVars.auto_level["a17"], UserVars.auto_level["a18"], UserVars.auto_level["a19"], UserVars.auto_level["a20"], UserVars.auto_level["a21"], UserVars.auto_level["a22"], UserVars.auto_level["a23"], UserVars.auto_level["a24"], UserVars.auto_level["a25"], UserVars.auto_level["a26"], UserVars.auto_level["a27"], UserVars.auto_level["a28"], UserVars.auto_level["a29"], UserVars.auto_level["a30"], UserVars.auto_level["a31"], UserVars.auto_level["a32"], UserVars.auto_level["a33"], UserVars.auto_level["a34"], UserVars.auto_level["a35"], UserVars.auto_level["a36"], UserVars.auto_level["a37"], UserVars.auto_level["a38"], UserVars.auto_level["a39"], UserVars.auto_level["a40"], UserVars.auto_level["a41"], UserVars.auto_level["a42"], UserVars.auto_level["a43"], UserVars.auto_level["a44"], UserVars.auto_level["a45"], UserVars.auto_level["a46"], UserVars.auto_level["a47"], UserVars.auto_level["a48"], UserVars.auto_level["a49"] ]

all_skills_hash = Hash.new

temp_number = 0
list_of_all_skills.each { |i|
  temp_number += 1
  times_level = 0
  plus = 0
  max = 999
  times_level = $1.to_i if (i =~ /((\d.)?\d+)x/)
  plus = $1.to_i if i =~ /\+(\d+)/
  max = $1.to_i if i =~ /max\:\s*(\d+)/
  temp_skill_info = [ times_level, plus, max ]
  all_skills_hash.store(temp_number, temp_skill_info)
}

list_of_all_shops = [ "bank", "weaponshop", "armorshop", "pawnshop", "npchealer", "npccleric", "town", "general store", "alchemist" ]

landing_roaming_npc_layout = [ s, s, s, s, se, n, n, w, e, n, w, e, n, w, e, n, n, n, e, e, e, e, e, e, e, e, e, e, s, e, w, s, sw, se, s, e, e, e, n, n, n, e, n, nw, se, s, s, s, w, s, n, e, s, e, w, s, n, sw, ne, n, w, w, w, w, s, s, e, e, n, w, e, s, s, w, w, w, w, w, w, w, w, w, w, e, n, n, nw, e, n, e, e, n, s, e, e, n, s, e, n, s, s, e, n, n, s, e, s, s, w, w, s, w, s, n, n, n, s, w, n, s, w, s, w, e, s, s, e, s, w, e, n, e, n, e, s, e, e, s, n, n, n, e, w, w, w, nw, e, n, n, n, n, s, s, e, n, n, s, e, s, s ]

if script.vars[1] == "reset"
  CharSettings['finished_thrak'] = nil
  CharSettings['finished_sprite_quest'] = nil
  CharSettings['finished_visiting_shops'] = nil
  CharSettings['done_with_messages'] = nil
  CharSettings['done_with_auto_skills'] = nil
  CharSettings['setup_has_been_run'] = nil
  echo "Settings have been reset."
  exit
elsif script.vars[1] == "thrak"
  CharSettings['finished_thrak'] = true
  echo "You will no longer attempt to speak with Raging Thrak/Trevor Dabbings/Airship Officer Tedrik."
  exit
elsif script.vars[1] =~ /mess/
  CharSettings['done_with_messages'] = true
  echo "You will no longer deliver messages."
  exit
elsif script.vars[1] =~ /shop/
  CharSettings['finished_visiting_shops'] = true
  echo "You will no longer visit shops."
  exit
elsif script.vars[1] =~ /setup/
  if (CharSettings['setup_has_been_run'] == true)
    nil
  else
    UserVars.auto_level["a1"] = "1x +1" if (Char.prof =~ /Bard|Ranger|Paladin/)
    UserVars.auto_level["a1"] = "2x +2" if (Char.prof =~ /Rogue|Warrior/)
    UserVars.auto_level["a1"] = "1x max:4" if (Char.prof =~ /Wizard|Sorcerer/)
    UserVars.auto_level["a1"] = "1x max:8" if (Char.prof =~ /Cleric|Empath/)
    UserVars.auto_level["a8"] = "2x +2" if (Char.prof =~ /Bard|Paladin|Ranger|Rogue|Warrior/)
    UserVars.auto_level["a11"] = "1x +1" if (Char.prof =~ /Bard|Paladin|Ranger/)
    UserVars.auto_level["a11"] = "2x +2" if (Char.prof =~ /Rogue|Warrior|Monk/)
    UserVars.auto_level["a14"] = "1x +1"
    UserVars.auto_level["a15"] = "0.5x" if (Char.prof =~ /Bard|Ranger|Paladin/)
    UserVars.auto_level["a15"] = "2x" if (Char.prof =~ /Rogue|Warrior/)
    UserVars.auto_level["a16"] = "0.25x"
    UserVars.auto_level["a17"] = "0.25x"
    UserVars.auto_level["a22"] = "1x +1"
    UserVars.auto_level["a28"] = "1x" if (Char.prof =~ /Bard|Paladin|Ranger/)
    UserVars.auto_level["a28"] = "2x" if (Char.prof =~ /Cleric|Empath|Sorcerer|Wizard/)
    UserVars.auto_level["a33"] = "+1" if (Char.prof =~ /Bard|Ranger|Paladin/)
    UserVars.auto_level["a34"] = "1x" if (Char.prof =~ /Bard|Ranger|Paladin/)
    if Char.prof =~ /Cleric|Empath|Sorcerer/
      UserVars.auto_level["a33"] = "0.5x"
      UserVars.auto_level["a34"] = "0.5x"
      UserVars.auto_level["a35"] = "1.5x"
    elsif Char.prof =~ /Monk/
      UserVars.auto_level["a9"] = "2x +2"
      UserVars.auto_level["a15"] = "2x +2"
      UserVars.auto_level["a28"] = "0.5x"
      UserVars.auto_level["a34"] = "0.5x"
    elsif Char.prof =~ /Wizard/
      UserVars.auto_level["a33"] = "1.5x"
      UserVars.auto_level["a34"] = "0.5x"
      UserVars.auto_level["a35"] = "0.5x"
    end
  end
  CharSettings['setup_has_been_run'] = true
  setup.call
  exit
end

recast_spells = proc{
  defensive_spell_list.each{ |i|
      (Spell[i].cast) if (!Spell[i].active?) && (Spell[i].affordable?) && (Spell[i].known?)
  }
  (Spell[102].cast) if (!Spell[102].active?) && (Spell[102].affordable?) && (Spell[102].known?) && (UserVars.auto_level["hunting_style"] =~ /cs/i)
  offensive_spell_list.each{ |i|
    (Spell[i].cast) if (!Spell[i].active?) && (Spell[i].affordable?) && (Spell[i].known?)
  }
}

auto_do_skills = proc{
  target_room_list = check_in_rooms
  go_to.call
  fput "check in"
  fput "3"
  while line = get
    if line =~ /^\s*[a-zA-Z]+\D+(\d+)\)\s+(\d+)\s+\d+\/\d+/
      skill_number1 = nil
      skill_number_level1 = nil
      skill_number1 = $1.to_i
      skill_number_level1 = $2.to_i
      skill_levels.store(skill_number1, skill_number_level1) if skill_number_level1 != nil
    elsif line =~ /^\s*(\d+)\)\s+(\d+)\s+\d+\/\d+\s+\(\d+\)\D+(\d+)\)\s+(\d+)\s+\d+\/\d+/
      skill_number1 = nil
      skill_number_level1 = nil
      skill_number2 = nil
      skill_number_level2 = nil
      skill_number1 = $1.to_i
      skill_number_level1 = $2.to_i
      skill_number2 = $3.to_i
      skill_number_level2 = $4.to_i
      skill_levels.store(skill_number1, skill_number_level1) if skill_number_level1 != nil
      skill_levels.store(skill_number2, skill_number_level2) if skill_number_level2 != nil
    elsif line =~ /^\s*(\d+)\)\s+(\d+)\s+\d+\/\d+\s+/
      skill_number1 = nil
      skill_number_level1 = nil
      skill_number1 = $1.to_i
      skill_number_level1 = $2.to_i
      skill_levels.store(skill_number1, skill_number_level1) if skill_number_level1 != nil
    elsif line =~ /To change a skill/
      break
    end
  end
  skill_levels.each{ |key,value|
    temp_skill_level = 0
    temp_skill_level = ((all_skills_hash.fetch(key)[0] * Char.level) + (all_skills_hash.fetch(key)[1])).truncate
    temp_max = 999
    temp_max = (all_skills_hash.fetch(key)[2])
    if value == temp_max
      nil
    elsif value > temp_max
      nil
      #skill_difference = (value) - (temp_max)
      #fput "#{key} -#{skill_difference}"
    elsif value < temp_max
      skill_difference = (value + temp_skill_level)
      if (skill_difference) > (temp_max)
        (temp_skill_level = (temp_max) - (value))
      else
        if ((all_skills_hash.fetch(key)[0] * Char.level) + (all_skills_hash.fetch(key)[1])).truncate > value
          temp_skill_level = ((all_skills_hash.fetch(key)[0] * Char.level) + (all_skills_hash.fetch(key)[1])).truncate - value
        else
          temp_skill_level = 0
        end
      end
      (fput "#{key} +#{temp_skill_level}") if (temp_skill_level != 0)
    end
  }
  fput "d"
  fput "4"
  CharSettings['done_with_auto_skills'] = true
  wait_until { (Room.current.id == 3427) || (Room.current.id == 8671) || (Room.current.id == 5826) }
  if Char.prof =~ /Bard/
    bard_renewal_cost = 0
    bard_renewal_cost += 1 if (Spell[1003].known?)
    if (Spell[1007].known?)
      if Spells.bard >= 17
        bard_renewal_cost += 12
      else
        bard_renewal_cost += ((Spells.bard - 7) + 2)
      end
    end
  end
}

ask_for_spells_check = proc{
  if UserVars.auto_level["ask_for_spells"] =~ /yes/i
    ask_for_spells_counter += 1
    person = nil
    need_elemental_spells = nil
    need_ranger_spells = nil
    need_wizard_spells = nil
    need_spirit_spells = nil
    (need_elemental_spells = true) if (!Spell[401].active? && !Spell[401].known?) && (!Spell[406].active? && !Spell[406].known?) && (!Spell[414].active? && !Spell[414].known?)
    (need_ranger_spells = true) if (!Spell[618].active? && !Spell[618].known?)
    (need_wizard_spells = true) if (!Spell[503].active? && !Spell[503].known?) && (!Spell[509].active? && !Spell[509].known?)
    (need_spirit_spells = true) if (!Spell[101].active? && !Spell[101].known?) && (!Spell[103].active? && !Spell[103].known?) && (!Spell[107].active? && !Spell[107].known?) && (!Spell[202].active? && !Spell[202].known?)
    if (GameObj.pcs.length > 0) && (ask_for_spells_counter > 1)
      ask_for_spells_counter = 0
      all_spells_needed_list = Array.new
      all_spells_needed_list.push("disk") if (need_disk == true)
      all_spells_needed_list.push("elemental") if (need_elemental_spells == true)
      all_spells_needed_list.push("ranger") if (need_ranger_spells == true)
      all_spells_needed_list.push("wizard") if (need_wizard_spells == true)
      all_spells_needed_list.push("spirit") if (need_spirit_spells == true)
      spell_to_ask_for = all_spells_needed_list.at(rand(all_spells_needed_list.length))
      echo "Asking for spells."
      if spell_to_ask_for == "disk"
        result = dothistimeout "say Anyone willing to cast a disk for me please?", 60, /(.*) gestures at you\.|(.*) makes a complex gesture at you\./
      else
        result = dothistimeout "say Any #{spell_to_ask_for} spells to be had?", 60, /(.*) gestures at you\.|(.*) makes a complex gesture at you\./
      end
      if (result =~ /(.*) gestures at you\./) || (result =~ /(.*) makes a complex gesture at you\./)
        person = $1
        sleep 6
        fput "smile #{person}"
        fput "say ::#{person} Thank you very much."
      end
    end
  end
}

check_mind_status = proc{
  if percentmind(100)
    echo "Mind full. Heading to town."
    move 'out' if checkpaths 'out'
    start_script 'go2', [ "town" ]
    wait_while { running?('go2') }
    if UserVars.auto_level["loot_script"] == "loot"
      start_script "loot-be-gone"
      wait_while{ running?('loot-be-gone') }
    elsif UserVars.auto_level["loot_script"] == "sloot"
      start_script "sloot", [ "sell" ]
      wait_while{ running?('sloot') }
    else
      start_script 'go2', [ "bank" ]
      wait_while { running?('go2') }
      fput "depo all"
    end
    move 'out' if checkpaths 'out'
    start_script 'go2', [ "town" ]
    wait_while { running?('go2') }
    sleep 5
    need_disk = nil
    (need_disk = true) unless (GameObj.loot.find { |i| i.name =~ /#{Char.name} disk|coffin/ })
    if (need_disk) and (Spell[511].known?)
      wait_until { Spell[511].affordable? }
      Spell[511].cast
      need_disk = nil
    end
    ask_for_spells_check.call
    echo "Waiting until mind clears."
    wait_until { percentmind < 25 }
    update_hunting_area.call
    if current_level != Char.level
      current_level = Char.level
      echo "You have leveled up, checking into the inn to train in skills."
      auto_do_skills.call
      move 'out' if checkpaths 'out'
      start_script 'go2', [ "town" ]
      wait_while { running?('go2') }
    end
    (Spell[606].cast) if (!Spell[606].active?) && (Spell[606].known?) && (Spell[606].affordable?)
    echo "Heading back out to hunt."
  end
}

new_room_stuff_to_do = proc{
  target = nil
  person_here = nil
  (person_here = true) if(GameObj.pcs.length)
  (person_here = true) if(GameObj.loot.find { |obj| (obj.noun =~ /disk|coffin/) && (obj.name !~ /#{Char.name}/) })
  (person_here = true) if(GameObj.loot.find { |obj| (obj.noun =~ /vine/) })
  (person_here = true) if(GameObj.npcs.find { |npc| (npc.status =~ /dead|stun|sleep|prone|sleep/) })
  if (person_here)
    wander.call
  else
    hunt_my_room = Room.current.id
  end
}

wander = proc {
  room = Room.current
  acceptable_adjacent_rooms = room.wayto.keys & current_hunting_grounds
  not_visited_rooms = acceptable_adjacent_rooms.find_all { |r| not wander_rooms.include?(r) }
  if not_visited_rooms.empty?
    next_room = wander_rooms.find { |r| acceptable_adjacent_rooms.include?(r) }
  else
    next_room = not_visited_rooms[rand(not_visited_rooms.length)]
  end
  if next_room
    wander_rooms.delete(next_room)
    wander_rooms.push(next_room)
    way = room.wayto[next_room]
    if way.class == String
      move(way)
      new_room_stuff_to_do.call
    else
      way.call
      new_room_stuff_to_do.call
    end
  else
    start_script 'go2', [ Room.current.find_nearest(current_hunting_grounds.collect { |id| id.to_i }).to_s ]
    wait_while { running?('go2') }
    new_room_stuff_to_do.call
  end
}

attack_target = proc{
  waitrt?
  waitcastrt?
  until checkstance == attacking_stance
    waitrt?
    fput "stance #{attacking_stance}"
    sleep 0.1
  end
  if (UserVars.auto_level["hunting_style"] =~ /unarmed/i)
    fput "stow right" if (checkright)
  else
    if (UserVars.auto_level["main_hand"].to_s.strip.length > 0) && (checkright !~ /#{UserVars.auto_level["main_hand"]}/)
      fput "stow right" if checkright != nil
      fput "get my #{UserVars.auto_level["main_hand"]}"
    end
  end
  if (UserVars.auto_level["hunting_style"] =~ /unarmed/i)
    fput "stow left" if (checkleft)
  else
    unless (UserVars.auto_level["off_hand"].empty?) || (UserVars.auto_level["off_hand"].to_s.strip.length > 0)
      if (checkleft !~ /#{UserVars.auto_level["off_hand"]}/)
        fput "stow left" if checkleft != nil
        fput "get my #{UserVars.auto_level["off_hand"]}"
        fput "remove my #{UserVars.auto_level["off_hand"]}"
      end
    end
  end
  (fput "stow left") if ((UserVars.auto_level["off_hand"].empty?) || (UserVars.auto_level["off_hand"].to_s.strip.length == 0)) && (checkleft != nil)
  if (first_attack)
    Spell[1005].cast(target) if (Spell[1005].known?) && (checkmana((bard_renewal_cost + 5))) && (UserVars.auto_level["hunting_style"] !~ /cs/i)
    Spell[607].cast(target) if (Spell[607].known?) && (Spell[607].affordable?) && (UserVars.auto_level["hunting_style"] !~ /cs/i)
    Spell[701].cast(target) if (Spell[701].known?) && (Spell[701].affordable?)
    if Char.level < 3
      Spell[501].cast(target) if Spell[501].known? && checkmana(1)
    elsif Char.level < 6
      Spell[501].cast(target) if Spell[501].known? && checkmana(2)
    elsif Char.level < 10
      Spell[501].cast(target) if Spell[501].known? && checkmana(3)
    elsif Char.level < 15
      Spell[501].cast(target) if Spell[501].known? && checkmana(4)
    elsif Char.level < 21
      Spell[501].cast(target) if Spell[501].known? && checkmana(5)
    end
    first_attack = nil
  end
  sleep 0.1
  waitrt?
  waitcastrt?
  if UserVars.auto_level["hunting_style"] =~ /cs/i
    if (Spell[502].known?) && (Spell[502].affordable?)
      Spell[502].cast(target)
    elsif (Spell[1106].known?) && (Spell[1106].affordable?)
      Spell[1106].cast(target)
    elsif (Spell[702].known?) && (Spell[702].affordable?)
      Spell[702].cast(target)
    elsif (Spell[1101].known?) && (Spell[1101].affordable?)
      Spell[1101].cast(target)
    elsif (Spell[302].known?) && (Spell[302].affordable?)
      Spell[302].cast(target)
    else
      Spell[1700].cast(target)
    end
  elsif UserVars.auto_level["hunting_style"] =~ /bolt/i
    if (Spell[306].known?) && (Spell[306].affordable?)
      Spell[306].cast(target)
    elsif (Spell[713].known?) && (Spell[713].affordable?)
      Spell[713].cast(target)
    elsif (Spell[111].known?) && (Spell[111].affordable?)
      Spell[111].cast(target)
    elsif (Spell[910].known?) && (Spell[910].affordable?)
      Spell[910].cast(target)
    elsif (Spell[906].known?) && (Spell[906].affordable?)
      Spell[906].cast(target)
    elsif (Spell[904].known?) && (Spell[904].affordable?)
      Spell[904].cast(target)
    elsif (Spell[901].known?) && (Spell[901].affordable?)
      Spell[901].cast(target)
    else
      Spell[1700].cast(target)
    end
  elsif UserVars.auto_level["hunting_style"] =~ /unarmed/i
    fput "stow left" if checkleft != nil
    fput "stow right" if checkright != nil
    start_time = nil
    if (current_unarmed_positioning == "excellent") && (current_unarmed_attack == nil)
      current_unarmed_attack = "kick"
    elsif (current_unarmed_attack == nil)
      current_unarmed_attack = "jab"
    end
    start_time = Time.now
    fput "#{current_unarmed_attack} ##{target.id}"
    current_unarmed_attack = nil
    while line = get
      if line =~ /You have (decent|good|excellent) positioning/
        current_unarmed_positioning = $1
      elsif line =~ /followup (jab|punch|grapple|kick) attack/
        current_unarmed_attack = $1
      elsif (line =~ /Roundtime\:|What were you referring to\?/) || (Time.now > (start_time + 2))
        break
      end
    end
  else
    fput "attack ##{target.id}"
  end
}

stand_check = proc{
  wait_while { running?('waitloot') } if running? "waitloot"
  until standing?
    waitrt?
    fput "stance def"
    fput "stand"
    sleep 0.1
  end
}

start_loot = proc {
  waitrt?
  start_looting = nil
  start_looting = true if(GameObj.npcs.find { |npc| (npc.status == 'dead') && (hunt_my_room == Room.current.id) })
  if start_looting
    target = nil
    waitrt?
    if UserVars.auto_level["loot_script"] == "loot"
      start_script "waitloot"
      wait_while { running?('waitloot') }
    elsif UserVars.auto_level["loot_script"] == "sloot"
      start_script "sloot"
      wait_while { running?('sloot') }
    else
      fput "loot"
    end
  end
}

get_in_not_attacking_stance = proc{
  if checkstance != "#{not_attacking_stance}" && (!Spell[9607].active?)
    waitrt?
    fput "stance #{not_attacking_stance}"
  end
}

make_sure_this_is_still_my_room = proc{
  if hunt_my_room != Room.current.id
    target = nil
    hunt_my_room = nil
    wander.call
  end
}

get_target = proc {
  if (target == nil)
    first_attack = nil
    target = GameObj.npcs.find { |npc| (npc.name =~ valid_targets) }
    (target = nil) if (target.name =~ /grizzled|ancient/) && (checkbounty !~ /hunt down and kill a particularly dangerous/)
    current_unarmed_attack = nil
    current_unarmed_positioning = nil
    if target == nil
      wander.call
    else
      first_attack = true
    end
  end
}

find_roaming_npc_in_landing = proc{
  echo "Finding roaming NPC to deliver message to."
  roaming_npc_here = nil
  person = nil
  kill_script "go2" if running? "go2"
  wait_until { !running? "go2" }
  (start_script 'go2', [ 294 ])
  wait_while { running?('go2') }
  landing_roaming_npc_layout.each { |room|
    sleep 0.1
    (roaming_npc_here = true) if GameObj.npcs.find{ |npc| npc.name =~ /#{message_destination_npc}/}
    if roaming_npc_here
      echo "Found the #{message_destination_npc}!"
      hand_in_message.call
      break
    else
      move "#{room}"
    end
  }
  if (roaming_npc_here == nil)
    echo "Couldn't find #{message_destination_npc}. Starting over."
    find_roaming_npc_in_landing.call
  end
}

check_current_level = proc{
  if Char.level > 20
    echo "This script is only designed to take you to level 20 and you are currently level #{Char.level}."
    exit
  end
}

go_to = proc{
  target_room = Room.current.find_nearest(target_room_list)
  fput "stand" if !standing?
  move 'out' if checkpaths 'out'
  kill_script "go2" if running? "go2"
  wait_until { !running? "go2" }
  move 'out' if checkpaths 'out'
  start_script 'go2', [ target_room.to_s ]
  wait_while { running?('go2') }
}

visit_all_shops = proc{
  result = dothistimeout "location", 3, /Icemule|Ice Plains|southern snowfields|High Plains|location is the Glacier|Ta\'Vaalor|Landing/
  if result =~ /Icemule|Ice Plains|southern snowfields|High Plains|location is the Glacier/
    fput "stand" if !standing?
    move 'out' if checkpaths 'out'
    kill_script "go2" if running? "go2"
    wait_until { !running? "go2" }
    move 'out' if checkpaths 'out'
    start_script 'go2', [ 3235 ]
    wait_while { running?('go2') }
    kill_script "go2" if running? "go2"
    wait_until { !running? "go2" }
    move 'out' if checkpaths 'out'
    start_script 'go2', [ 3431 ]
    wait_while { running?('go2') }
  elsif result =~ /Ta\'Vaalor|Landing/
    nil
  end
  list_of_all_shops.each{ |room|
    kill_script "go2" if running? "go2"
    wait_until { !running? "go2" }
    if room == "npccleric"
      result = dothistimeout "location", 3, /Icemule|Ice Plains|southern snowfields|High Plains|location is the Glacier|Ta\'Vaalor|Landing/
      if result =~ /Icemule|Ice Plains|southern snowfields|High Plains|location is the Glacier|Landing/
        move 'out' if checkpaths 'out'
        start_script 'go2', [ "#{room}" ]
      elsif result =~ /Ta\'Vaalor/
        nil
      end
    else
      move 'out' if checkpaths 'out'
      start_script 'go2', [ "#{room}" ]
    end
    wait_while { running?('go2') }
    if room == "bank"
      fput "depo all"
      fput "depo all"
      fput "withdraw 100"
    end
  }
  result = dothistimeout "location", 3, /Icemule|Ice Plains|southern snowfields|High Plains|location is the Glacier|Ta\'Vaalor|Landing/
  if result =~ /Icemule|Ice Plains|southern snowfields|High Plains|location is the Glacier|Landing/
    target_room_list = clothier_rooms
    go_to.call
  elsif result =~ /Ta\'Vaalor/
    nil
  end
  CharSettings['finished_visiting_shops'] = true
}

do_sprite_quest = proc{
  echo "Doing sprite quest."
  fput "tell sprite speed up"
  fput "tell sprite speed up"
  fput "accept"
  fput "nod sprite"
  while line = get
    if line =~ /\[Click on the sprite and select NOD or SHAKE HEAD AT from the RP menu\.\]|\[You can also click on the sprite and select nod from the Roleplay menu\.\]|\[Click on the sprite and select NOD or SHAKE HEAD AT from the Roleplay menu\.\]|\[You can click on the sprite and select NOD from the Roleplay menu\.\]|You just give me a nod when you\'re ready to continue|Give me a NOD if you want to try it|Nod to me when you're all done/
      fput "nod sprite"
      echo "If sprite doesn't continue after 15 seconds then try moving to a new room and nodding at the sprite."
    elsif line =~ /\[You may ACCEPT the offer to travel with the sprite a bit\, or DECLINE to go your own way\.\]|\[You may ACCEPT if you would like to be given quests to learn your way around\, or DECLINE to explore on your own\.\]|\[You may ACCEPT the guided tour, or DECLINE to explore alone\.\]/
      fput "accept"
    elsif line =~ /\[You can click on the man and select LOOK from the menu\.\]/
      fput "look man"
    elsif line =~ /\[Select the SIT option from the ACTIONS menu in the quicklinks bar\.\]/
      fput "sit"
    elsif line =~ /The sprite whispers\, \"You can answer her by SAYing YES or NO\.\"|The sprite whispers\, \"You can say YES or NO to answer him\.\"|say YES if you\'re up for it/
      fput "'yes"
    elsif line =~ /\[You can click on the quicklink for SEARCH at the bottom of the story window\.\]/
      fput "search"
    elsif line =~ /A wild\-eyed woman offers you a small shield\.  ACCEPT the offer or DECLINE it\./
      fput "stow right" if checkright != nil
      fput "stow left" if checkleft != nil
      fput "accept"
    elsif line =~ /\[You can click on the warrior and select HELP from the questions menu\, or click on the sprite and select SHAKE HEAD AT from the Roleplay menu\.\]/
      fput "ask warrior about help"
    elsif line =~ /let\'s go get that warrior a new sword/
      kill_script "go2" if running? "go2"
      wait_until { !running? "go2" }
      move 'out' if checkpaths 'out'
      start_script 'go2', [ "weaponshop" ]
      wait_while { running?('go2') }
    elsif line =~ /\[You can click on the .* and select ORDER from the menu to get started\.\]/
      fput "stow right" if checkright != nil
      fput "stow left" if checkleft != nil
      if Room.current.id == 3453
        fput "order 13"
      elsif Room.current.id == 402
        fput "order 3"
      elsif Room.current.id == 10367
        fput "order 2"
      end
      fput "buy"
      move 'out'
    elsif line =~ /\[You can also click on the warrior and select GIVE/
      fput "give warrior"
    elsif line =~ /You can ACCEPT the chance to help him/
      fput "accept"
    elsif line =~ /we can use DIRECTIONS TAVERN to find the Honeybeer Inn|we can use DIRECTIONS MUSEUM to find the Wehnimer\'s Museum|we can use DIRECTIONS ALCHEMIST to find Elantaran\'s Magic Supply/
      kill_script "go2" if running? "go2"
      wait_until { !running? "go2" }
      move 'out' if checkpaths 'out'
      (start_script 'go2', [ 3448 ]) if line =~ /we can use DIRECTIONS TAVERN to find the Honeybeer Inn/
      (start_script 'go2', [ 14448 ]) if line =~ /we can use DIRECTIONS MUSEUM to find the Wehnimer\'s Museum/
      (start_script 'go2', [ 10364 ]) if line =~ /we can use DIRECTIONS ALCHEMIST to find Elantaran\'s Magic Supply/
      wait_while { running?('go2') }
    elsif line =~ /\[You can select the HIDE option from the Actions menu on the quicklinks bar\.\]/
      fput "hide"
    elsif line =~ /\[You can click on the .*and select STEAL from the menu\.\]/
      fput "steal smuggler"
    elsif line =~ /\[You can select the UNHIDE option from the Actions menu on the quicklinks bar\.\]/
      fput "unhide"
    elsif line =~ /The sprite whispers\, \"We need to go out of this room and look around for the/
      move 'out'
    elsif line =~ /\[Click on the (.*) and select SHOW RIGHT from the menu\.\]/
      npc_sprite_quest = $1
      fput "show right to #{npc_sprite_quest}"
    elsif line =~ /Get DIRECTIONS to the temple\, and wait for the shipment to arrive\./
      target_room_list = temple_rooms
      go_to.call
    elsif line =~ /better say no/
      fput "'no"
    elsif line =~ /\[You can select HOOT from the Roleplay quicklinks menu\.\]/
      fput "hoot"
    elsif line =~ /\[You can try to TEND the child\'s wounds\, FORAGE for or purchase herbs\, or just WAIT and see what happens\./
      fput "wait"
      move 'out'
    elsif line =~ /\[Click on the child and select \"pour flask in\" from the menu\.\]/
      fput "pour flask in child"
      fput "stow flask"
    elsif line =~ /If you\'d like\, go ahead and GIVE the cleric a few silvers\.\"/
      fput "give cleric 101"
    elsif line =~ /The wounded child offers you .*\.  ACCEPT the offer or DECLINE it\./
      fput "accept"
      fput "stow right"
    elsif line =~ /I\'ve heard some stories about a cave just outside of town that\'s supposed to be the lair of a terrible beast\./
      move 'out' if checkpaths 'out'
      start_script 'go2', [ "bank" ]
      wait_while { running?('go2') }
      fput "depo all"
      fput "nod sprite"
    elsif line =~ /Your (.*) won\'t do you much good unless you\'re holding it in your right hand\./
      weapon = $1
    elsif line =~ /say READY and we\'ll move on\./
      fput "get my #{weapon}"
      fput "stance off"
      fput "'ready"
    elsif line =~ /Let\'s head NORTH and see if we can find it/
      move 'north'
      move 'northeast'
      move 'north'
      move 'northwest'
      fput "go bridge"
    elsif line =~ /A carrion worm slithers in\./
      target = GameObj.npcs.find { |npc| npc.name =~ /worm/ }
      until target.status =~ /dead|gone/
        fput "attack"
        sleep 0.1
      end
      sleep 1
      waitrt?
      fput "search worm"
    elsif line =~ /The sprite points to a cloudy blue potion in the corner/
      fput "get potion"
    elsif line =~ /just say ready/
      fput "'ready"
    elsif line =~ /Only NOD at me if you actually need assistance/
      fput "shake head at sprite"
      CharSettings['finished_sprite_quest'] = true
      break
    end
  end
}

check_sprite_quest = proc{
  echo "Checking if sprite quest has been completed yet."
  fput "accept"
  while line = get
    if line =~ /You accept the sprite\'s invitation\./
      doing_sprite_quest = true
      break
    elsif line =~ /You have no offers to accept\./
      doing_sprite_quest = nil
      break
    end
  end
  if doing_sprite_quest == nil
    sleep 2
    result = dothistimeout "look", 3, /There is a sprite sitting on your shoulder\./
    if result =~ /There is a sprite sitting on your shoulder\./
      doing_sprite_quest = true
    elsif result.nil?
      echo "Sprite quest has been completed. Moving on."
      CharSettings['finished_sprite_quest'] = true
    end
  end
  (do_sprite_quest.call) if (doing_sprite_quest)
}

wait_timer_for_message = proc{
  kill_script "go2" if running? "go2"
  wait_until { !running? "go2" }
  move 'out' if checkpaths 'out'
  start_script 'go2', [ "town" ]
  wait_while { running?('go2') }
  echo "Couldn't get a message. Trying again in 1 minute."
  sleep 60
  run_messages.call
}

hand_in_message = proc{
  echo "Delivering message."
  if roaming_npc_message == nil
    kill_script "go2" if running? "go2"
    wait_until { !running? "go2" }
    move 'out' if checkpaths 'out'
    start_script 'go2', [ message_destination_room ]
    wait_while { running?('go2') }
    if (message_destination_npc == "North guard") || (message_destination_npc == "East guard") || (message_destination_npc == "South guard") || (message_destination_npc == "West guard")
      guard_here = nil
      (guard_here = true) if GameObj.npcs.find{ |npc| npc.name =~ /guard/}
      if guard_here == nil
        kill_script "go2" if running? "go2"
        wait_until { !running? "go2" }
        move 'out' if checkpaths 'out'
        start_script 'go2', [ 3424 ]
        wait_while { running?('go2') }
      end
    end
  end
  fput "give my message to #{message_destination_npc}"
  sleep 1
  (fput "go gate") if (Room.current.id == 5827) || (Room.current.id == 5907) || (Room.current.id == 5906) || (Room.current.id == 3727)
  if (checkleft =~ /message/) || (checkright =~ /message/)
    get_message_destination.call
  else
    echo "Depositing silver."
    kill_script "go2" if running? "go2"
    wait_until { !running? "go2" }
    move 'out' if checkpaths 'out'
    start_script 'go2', [ "bank" ]
    wait_while { running?('go2') }
    fput "depo all"
    get_message_job.call
  end
}

get_message_job = proc{
  if Char.level > 2
    echo "You are now level #{Char.level}. We are now going to hunt."
    CharSettings['done_with_messages'] = true
  else
    if (Room.current.id != 7971) && (Room.current.id != 2438) && (Room.current.id != 13519)
      echo "Getting a message to deliver."
      target_room_list = message_runner_rooms
      go_to.call
    end
    fput "ask #{GameObj.npcs.last} about job"
    while line = get
      if line =~ /I just gave you a message not long ago|What did you do with the last one I gave you/
        wait_timer_for_message.call
        break
      elsif line =~ /I\'m really sorry|I\'m sorry/
        sleep 3
        get_message_job.call
        break
      elsif line =~ /As you step toward .* you trip over a large box/
        waitrt?
        (fput "stand") if (!standing?)
        get_message_job.call
        break
      elsif line =~ /take this message|hands you the message/
        get_message_destination.call
        break
      end
    end
  end
}

get_message_destination = proc{
  roaming_npc_message = nil
  person = nil
  message_destination_room = nil
  fput "look my message"
  while line = get
    if line =~ /It is addressed on the outside to the House of (.*) (doorkeeper|gatekeeper)/
      person = $1
      message_destination_npc = $2
      message_destination_room = 249 if person =~ /Arcane Masters/
      message_destination_room = 256 if person =~ /Rising Phoenix/
      message_destination_room = 378 if person =~ /Argent Aspis/
      message_destination_room = 7983 if person =~ /Paupers/
      message_destination_room = 274 if person =~ /Brigatta/
      break
    elsif line =~ /It is addressed on the outside to Iron Jack/
      message_destination_room = 8616
      message_destination_npc = "blacksmith"
      break
    elsif line =~ /It is addressed to Guardsman ([a-zA-Z]+)/
      person = $1
      message_destination_room = 5827 if (person == "Raertria") || (person == "Rethustril")
      message_destination_room = 5827 if (person == "Thaevar") || (person == "Lafevartas")
      message_destination_room = 5827 if (person == "Calikran") || (person == "Ridtha")
      message_destination_room = 5907 if (person == "Vontrilaias") || (person == "Syllardeth")
      message_destination_room = 5907 if (person == "Dukash") || (person == "Simlasyth")
      message_destination_room = 5907 if (person == "Arnlis") || (person == "Gaelthar")
      message_destination_room = 5906 if (person == "Corilaera") || (person == "Sehdrenis")
      message_destination_room = 5906 if (person == "Aelaetril") || (person == "Dhosha")
      message_destination_room = 5906 if (person == "Zydeth") || (person == "Dhoianna")
      message_destination_room = 3727 if (person == "Ariyr") || (person == "Tyhel")
      message_destination_room = 3727 if (person == "Nailanna") || (person == "Raerselim")
      message_destination_room = 3727 if (person == "Cormah") || (person == "Ryaro")
      message_destination_room = 3495 if (person == "Hawynrah") || (person == "Lyimlyn")
      message_destination_npc = person
      break
    elsif line =~ /It is addressed on the outside to the Gypsy Fortuneteller|It is addressed on the outside to a Wehnimer\'s Runner/
      (message_destination_npc = "fortuneteller") if (line =~ /It is addressed on the outside to the Gypsy Fortuneteller/)
      (message_destination_npc = "runner") if (line =~ /It is addressed on the outside to a Wehnimer\'s Runner/)
      roaming_npc_message = true
      find_roaming_npc_in_landing.call
      break
    elsif line =~ /It is addressed on the outside to the (.*) Gate Guard/
      person = $1
      message_destination_room = 3307 if person == "North"
      message_destination_room = 3041 if person == "East"
      message_destination_room = 2487 if person == "South"
      message_destination_room = 3222 if person == "West"
      message_destination_npc = person + " guard"
      break
    elsif line =~ /It is addressed on the outside to the town clerk|It is addressed to Sassion|bondsman/
      target_room_list = message_runner_rooms
      message_destination_room = Room.current.find_nearest(target_room_list)
      (message_destination_npc = "clerk") if (line =~ /It is addressed on the outside to the town clerk/)
      (message_destination_npc = "Sassion") if (line =~ /It is addressed to Sassion/)
      (message_destination_npc = "bondsman") if (line =~ /bondsman/)
      break
    end
  end
  if (message_destination_room == nil) && (roaming_npc_message == nil)
    echo "Message destination not in my records. Exiting."
    exit
  end
  hand_in_message.call
}

run_messages = proc{
  message_destination_room = nil
  message_destination_npc = nil
  person = nil
  fput "stow left" if (checkleft != nil) && (checkleft !~ /message/)
  fput "stow right" if (checkright != nil) && (checkright !~ /message/)
  if (checkleft =~ /message/) || (checkright =~ /message/)
    get_message_destination.call
  else
    get_message_job.call
  end
}

do_raging_thrak = proc{
  echo "Visiting Raging Thrak/Trevor Dabbings/Airship Officer Tedrik."
  target_room_list = raging_thrak_rooms
  go_to.call
  (fput "go door") if (target_room == 21223)
  while line = get
    if (line =~ /(\d)\.  My\./) || (line =~ /(\d)\.  \!\!\!\!\!\!\!\!\!\!\!\!\!\!/) || (line =~ /(\d)\.  Silverwood Manor\./) || (line =~ /(\d)\.  Exchange./) || (line =~ /(\d)\.  Help the person out until they are able to resume fighting\, then resume your own hunt\./) || (line =~ /(\d)\.  Town Square Central\./) || (line =~ /(\d)\.  SERVICE\./) || (line =~ /(\d)\.  The Adventurer\'s Guild\./) || (line =~ /(\d)\.  Town Center\./) || (line =~ /(\d)\.  Use the GLANCE command\./) || (line =~ /(\d)\.  REGISTER it\./) || (line =~ /(\d)\.  Ask if the group would like help\./) || (line =~ /(\d)\. King\'s Court\./)
      fput "answer #{$1}"
    elsif line =~ /When walking around\, you should assume that things on the ground are yours for the taking\.|Your things are perfectly safe if you leave them lying on the ground, even momentarily\.|Repeating a request for help multiple times in rapid succession is a sure key to winning friends\./
      fput "answer f"
    elsif line =~ /It\'s perfectly acceptable to talk about out of character terms\, such as the latest Marvel movie\, in private whispers with other people but not aloud\.|Before you go out hunting\, you should always check what stance you are in\./
      fput "answer t"
    elsif line =~ /\"Congratulations\,\"/
      CharSettings['finished_thrak'] = true
      move 'out'
      break
    end
  end
}

check_if_person_wants_to_run_messages = proc{
  if (CharSettings['done_with_messages'] == nil)
    echo "Would you like to run messages until level 3? Type NOD for yes or SHAKE for no. If you choose yes you can stop doing messages early by killing the script then typing ;auto-level message"
    echo "Icemule messages are currently bugged in game and it's not recommended doing messages in Icemule at the moment."
    while line = get
      if line =~ /You nod\./
        break
      elsif line =~ /Shake what\?/
        CharSettings['done_with_messages'] = true
        break
      end
    end
  end
}

check_if_dead = proc{
  if dead?
    if Char.level < 10
      echo "I am dead. I'm under level 10 so I am departing."
      waitrt?
      fput "depart confirm"
      kill_script "go2" if running? "go2"
      wait_until { !running? "go2" }
      move 'out' if checkpaths 'out'
      start_script 'go2', [ "town" ]
      wait_while { running?('go2') }
      target = nil
      hunt_my_room = nil
      echo "Waiting 10 minutes before going back at it."
      sleep 600
    else
      echo "I am dead. I am level 10 or higher so I am not auto departing. You are on your own. Script exiting."
      exit
    end
  end
}

check_for_wounds = proc{
  if (percenthealth < 65)
    if (Spell[1101].known?) && (Spell[1101].affordable?)
      waitrt?
      waitcastrt?
      fput "cure blood"
    end
  end
  sleep 0.1
  if (Wounds.head >= 2) || (Wounds.neck >= 2) || (Wounds.abs >= 2) || (Wounds.lhand >= 2) || (Wounds.rhand >= 2) || (Wounds.larm >= 2) || (Wounds.rarm >= 2) || (Wounds.chest >= 2) || (Wounds.back >= 2) || (Wounds.rleg >= 2) || (Wounds.lleg >= 2) || (Wounds.nerves >= 2) || (Wounds.leye >= 2) || (Wounds.reye >= 2) || (Scars.head >= 2) || (Scars.neck >= 2) || (Scars.abs >= 2) || (Scars.lhand >= 2) || (Scars.rhand >= 2) || (Scars.larm >= 2) || (Scars.rarm >= 2) || (Scars.chest >= 2) || (Scars.back >= 2) || (Scars.rleg >= 2) || (Scars.lleg >= 2) || (Scars.nerves >= 2) || (Scars.leye >= 2) || (Scars.reye >= 2) || (Wounds.larm >= 1 && Wounds.rarm >= 1) || (Scars.larm >= 1 && Scars.rarm >= 1) || (Scars.lhand >= 1 && Scars.rhand >= 1) || (Wounds.lhand >= 1 && Wounds.rhand >= 1) || (Wounds.leye >= 1 && Wounds.reye >= 1) || (Scars.leye >= 1 && Scars.reye >= 1) || (percenthealth < 40)
    echo "Wounded. Heading to town."
    kill_script "go2" if running? "go2"
    wait_until { !running? "go2" }
    move 'out' if checkpaths 'out'
    start_script 'go2', [ "town" ]
    wait_while { running?('go2') }
    if UserVars.auto_level["healing_preference"] =~ /ask/i
      unless UserVars.auto_level["tip_amount"].empty?
        move 'out' if checkpaths 'out'
        start_script 'go2', [ "bank" ]
        wait_while { running?('go2') }
        fput "withdraw #{UserVars.auto_level["tip_amount"].to_i} silvers"
        move 'out' if checkpaths 'out'
        start_script 'go2', [ "town" ]
        wait_while { running?('go2') }
      end
      number_of_tries = UserVars.auto_level["number_of_tries"].to_i
      waiting_for_healing.call
      (use_use_herbs_script_to_heal.call) if (received_healing == nil)
    elsif UserVars.auto_level["healing_preference"] =~ /script/i
      (use_use_herbs_script_to_heal.call)
    elsif UserVars.auto_level["healing_preference"] =~ /none/i
      echo "You have selected 'none' as your healing preference in setup so the script will now exit."
      echo "If you wish to have the script attempt to heal you in the future run setup again and choose a different healing preference."
      echo "Type ;auto-level setup to enter setup menu."
      exit
    end
  end
}

use_use_herbs_script_to_heal = proc{
  if Script.exists?('useherbs')
    echo "Running ;useherbs to heal wounds."
    start_script 'useherbs'
    wait_while { running?('useherbs') }
  else
    echo "Script ;useherbs not found. Sorry, I can't heal you. You're on your own."
    exit
  end
}

waiting_for_healing = proc{
  Thread.new{
    sleep 63
    put "look"
  }
  start_healing_time = Time.now
  person = nil
  received_healing = nil
  number_of_tries -= 1
  fput "say Can someone please heal me?"
  while line = get
    if (line =~ /(.*) takes your .* damage\./) || (line =~ /(.*) takes.*your blood loss\./)
      person = $1
      received_healing = true
      sleep 15
      (fput "say ::#{person} #{UserVars.auto_level["thank_message"]}.") unless (UserVars.auto_level["thank_message"].empty?)
      (fput "give #{person} #{UserVars.auto_level["tip_amount"].to_i} silvers") unless (UserVars.auto_level["tip_amount"].empty?)
      break
    elsif (Time.now > (start_healing_time + 60))
      break
    end
  end
  (waiting_for_healing.call) if (received_healing == nil) && (number_of_tries > 0)
}

check_if_poisoned_or_diseaseed = proc{
  if (checkpoison) || (checkdisease)
    echo "I am diseased or poisoned. Heading to town."
    kill_script "go2" if running? "go2"
    wait_until { !running? "go2" }
    move 'out' if checkpaths 'out'
    start_script 'go2', [ "town" ]
    wait_while { running?('go2') }
    if (checkpoison) || (checkdisease)
      if (checkdisease) && (Spell[113].known?)
        echo "Trying to cure my disease."
        until !checkdisease
          Spell[113].cast
          sleep 1
        end
      elsif (checkpoison) && (Spell[114].known?)
        echo "Trying to cure my poison."
        until !checkpoison
          Spell[114].cast
          sleep 1
        end
      else
        waiting_for_undisease_or_unpoison.call
      end
    end
  end
}

waiting_for_undisease_or_unpoison = proc{
  Thread.new{
    sleep 17
    put "look"
  }
  start_healing_time = Time.now
  person = nil
  if (GameObj.pcs.length > 0)
    (fput "say Can someone please cast unpoison on me?") if (checkpoison)
    (fput "say Can someone please cast undisease on me?") if (checkdisease)
  end
  while line = get
    if (line =~ /(.*) gestures at you\./) || (line =~ /(.*) makes a complex gesture at you\./)
      person = $1
      sleep 3
      (fput "say ::#{person} Thank you very much.")
      break
    elsif (Time.now > (start_healing_time + 15))
      break
    end
  end
  (waiting_for_undisease_or_unpoison.call) if (checkpoison) || (checkdisease)
}

update_hunting_area = proc{
  valid_targets = /rat|thyril|hobgoblin|snowcat|orc|leaper|monkey|crab|crocodile|guardian|dog|ant|squirrel|goblin|siren|relnak|kappa|warlord|chieftain|soldier/
  kill_script "go2" if running? "go2"
  wait_until { !running? "go2" }
  move 'out' if checkpaths 'out'
  start_script 'go2', [ "town" ]
  wait_while { running?('go2') }
  if Room.current.id == 2300
    if Char.level < 6
      current_hunting_grounds = level_1_icemule_rats_nest
    elsif Char.level == 6
      current_hunting_grounds = level_2_icemule_thyrils
    elsif Char.level == 7
      current_hunting_grounds = level_3_icemule_hobgoblins_and_snowcats
    elsif Char.level < 11
      current_hunting_grounds = level_6_icemule_lesser_orcs_and_leapers
    elsif Char.level < 13
      current_hunting_grounds = level_8_icemule_thurfels_island
    elsif Char.level < 15
      current_hunting_grounds = level_10_icemule_thurfels_island
    else
      current_hunting_grounds = level_14_icemule_high_plains
    end
  elsif Room.current.id == 228
    if Char.level < 5
      current_hunting_grounds = level_1_landing_ants
    elsif Char.level == 5
      current_hunting_grounds = level_2_landing_squirrels
    elsif Char.level < 6
      current_hunting_grounds = level_3_landing_hobgoblins
    elsif Char.level < 8
      current_hunting_grounds = level_4_landing_kappas
    elsif Char.level < 10
      current_hunting_grounds = level_7_landing_burrow_orcs
    elsif Char.level < 18
      current_hunting_grounds = level_10_landing_shelfae
    else
      echo "Sorry, this is as far as this script can take you in this town."
      exit
    end
  elsif Room.current.id == 3519
    if Char.level < 6
      current_hunting_grounds = level_1_vaalor_fire_ants
    elsif Char.level == 6
      current_hunting_grounds = level_2_vaalor_goblins_and_sirens
    elsif Char.level < 11
      current_hunting_grounds = level_3_vaalor_relnaks_and_leapers
    else
      echo "Sorry, this is as far as this script can take you in this town."
      exit
    end
  end
}

hunting = proc{
  fput "stow right" if checkright != nil
  fput "stow left" if checkleft != nil
  if (UserVars.auto_level["hunting_style"] =~ /cs/i)
    not_attacking_stance = "guarded"
    attacking_stance = "guarded"
  else
    not_attacking_stance = "guarded"
    attacking_stance = "offensive"
  end
  fput "get my #{UserVars.auto_level["main_hand"]}" if UserVars.auto_level["main_hand"]
  fput "get my #{UserVars.auto_level["off_hand"]}" if UserVars.auto_level["off_hand"]
  sleep 0.3
  fput "remove my #{UserVars.auto_level["off_hand"]}" if (UserVars.auto_level["off_hand"]) && (checkleft == nil)
  if UserVars.auto_level["loot_script"]  == "loot"
    start_script "loot-be-gone"
    wait_while{ running?('loot-be-gone') }
  elsif UserVars.auto_level["loot_script"]  == "sloot"
    start_script "sloot", [ "sell" ]
    wait_while{ running?('sloot') }
  else
    move 'out' if checkpaths 'out'
    start_script 'go2', [ "bank" ]
    wait_while { running?('go2') }
    fput "depo all"
  end
  update_hunting_area.call
  echo "Starting the hunt!"
  loop{
    check_if_dead.call
    start_loot.call
    get_in_not_attacking_stance.call
    check_if_poisoned_or_diseaseed.call
    check_for_wounds.call
    stand_check.call
    check_mind_status.call
    recast_spells.call
    make_sure_this_is_still_my_room.call
    target = nil if (target.status =~ /dead|gone/)
    get_target.call
    attack_target.call if (target != nil) && (target.status !~ /dead|gone/) && (hunt_my_room == Room.current.id)
    sleep 0.1
  }
}

character_cannot_attack_check = proc{
  if (UserVars.auto_level["hunting_style"] =~ /cs|bolt/i) && (Char.prof !~ /Cleric|Empath|Sorcerer|Wizard/)
    echo "Sorry, #{Char.prof} is not set up to hunt with CS or Bolt spells. Run setup again and choose either 'attack' or 'unarmed' for hunting style."
    echo "To enter setup menu type ;auto-level setup"
    exit
  elsif (UserVars.auto_level["hunting_style"].empty?)
    echo "You must choose a hunting style. Run setup again and choose either 'attack, 'unarmed', 'CS', or 'bolt' as your hunting style."
    echo "To enter setup menu type ;auto-level setup"
    exit
  elsif (UserVars.auto_level["hunting_style"] !~ /unarmed/i) && (UserVars.auto_level["main_hand"] == nil)
    echo "You must specify which weapon you will be hunting with. Run setup again and enter the name of your weapon. If using spells enter the name of your runestaff, otherwise enter the name of your weapon."
    echo "To enter setup menu type ;auto-level setup"
    exit
  end
}

check_if_settings_are_filled_out = proc{
  if UserVars.auto_level["healing_preference"] !~ /ask|script|none/i
    echo "Healing Preference in setup must be set to either 'ask', 'script', or 'none'. Please run setup and fill out this option."
    echo "Type ;auto-level setup to enter setup menu."
    exit
  end
}

if Char.level > 2
  CharSettings['done_with_messages'] = true
  CharSettings['finished_visiting_shops'] = true
  CharSettings['finished_sprite_quest'] = true
  CharSettings['finished_thrak'] = true
end
check_current_level.call
visit_all_shops.call unless CharSettings['finished_visiting_shops']
check_sprite_quest.call unless CharSettings['finished_sprite_quest']
do_raging_thrak.call unless CharSettings['finished_thrak']
check_if_person_wants_to_run_messages.call
run_messages.call unless CharSettings['done_with_messages']
(echo "You must run setup to proceed. Type ;auto-level setup and follow the instructions.";exit) if (CharSettings['setup_has_been_run'] == nil)
auto_do_skills.call if (CharSettings['done_with_auto_skills'] == nil)
character_cannot_attack_check.call
check_if_settings_are_filled_out.call
hunting.call
